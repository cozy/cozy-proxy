// Generated by CoffeeScript 1.9.0
var User, bcrypt, localization, passport, passwordKeys, qs;

passport = require('passport');

qs = require('querystring');

bcrypt = require('bcrypt');

localization = require('../lib/localization_manager');

passwordKeys = require('../lib/password_keys');

User = require('../models/user');

module.exports.authenticate = function(req, res, next) {
  var process;
  process = function(err, user) {
    var error;
    if (err) {
      return next(new Error(localization.t('error server')));
    } else if (user === void 0 || !user) {
      error = new Error(localization.t('error bad credentials'));
      error.status = 401;
      return next(error);
    } else {
      return passwordKeys.initializeKeys(req.body.password, function(err) {
        if (err) {
          return next(new Error(localization.t('error keys not intialized')));
        } else {
          return req.logIn(user, function(err, info) {
            if (err) {
              error = new Error(localization.t("error login failed"));
              error.status = 401;
              return next(error);
            } else {
              return res.send(200, {
                success: true
              });
            }
          });
        }
      });
    }
  };
  return passport.authenticate('local', process)(req, res, next);
};

module.exports.isAuthenticated = function(req, res, next) {
  var url;
  if (req.isAuthenticated()) {
    return next();
  } else {
    url = "/login" + req.url;
    if (req.query.length) {
      url += "?" + (qs.stringify(req.query));
    }
    return res.redirect(url);
  }
};

module.exports.authenticateWithEmail = function(req, res, next) {
  var credentials, email, header, password, unauthorized, _ref;
  req.pause();
  unauthorized = function() {
    res.statusCode = 401;
    res.setHeader('WWW-Authenticate', 'Basic realm="Secure Area"');
    return res.end('Unauthorized');
  };
  header = req.headers['authorization'];
  if (header == null) {
    return unauthorized();
  }
  credentials = new Buffer(header.split(' ')[1], 'base64').toString('ascii');
  _ref = credentials.split(':'), email = _ref[0], password = _ref[1];
  return User.first(function(err, user) {
    if ((err != null) || (user == null)) {
      return unauthorized();
    } else {
      return bcrypt.compare(password, user.password, function(err, result) {
        if ((err != null) || !result || user.email !== email) {
          return unauthorized();
        } else {
          next();
          return req.resume();
        }
      });
    }
  });
};
