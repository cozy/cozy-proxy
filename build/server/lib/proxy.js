// Generated by CoffeeScript 1.7.1
var async, config, errorHandler, httpProxy, localization, logger, passport, proxy, router;

httpProxy = require('http-proxy');

async = require('async');

passport = require('passport');

config = require('../config');

logger = require('printit')({
  date: false,
  prefix: 'lib:proxy'
});

router = require('./router');

localization = require('./localization_manager');

errorHandler = require('../middlewares/errors');

proxy = null;

module.exports.getProxy = function() {
  return proxy;
};

module.exports.initializeProxy = function(app, server) {
  proxy = httpProxy.createProxyServer();
  proxy.on('error', function(err, req, res) {
    err = new Error(err);
    err.statusCode = 500;
    err.template = {
      name: 'error',
      params: {
        polyglot: localization.getPolyglot()
      }
    };
    return errorHandler(err, req, res);
  });
  return server.on('upgrade', function(req, socket, head) {
    var cookieParser, fakeRes, initialize, session, sessionParser, _ref;
    req.originalUrl = req.url;
    fakeRes = {
      on: function() {}
    };
    _ref = config.authSteps, cookieParser = _ref[0], sessionParser = _ref[1], initialize = _ref[2], session = _ref[3];
    return async.series([
      function(callback) {
        return cookieParser(req, fakeRes, callback);
      }, function(callback) {
        return sessionParser(req, fakeRes, callback);
      }, function(callback) {
        return initialize(req, fakeRes, callback);
      }, function(callback) {
        return session(req, fakeRes, callback);
      }
    ], function(err) {
      var isPublic, port, routes, slug;
      isPublic = /^\/public\/(.*)/.test(req.url);
      if ((req.isAuthenticated() && !err) || isPublic) {
        if (slug = app._router.matchRequest(req).params.name) {
          if (/^\/apps\/(.*)/.test(req.url)) {
            req.url = req.url.replace("/apps/" + slug, '');
          } else if (isPublic) {
            req.url = req.url.replace("/public/" + slug, '/public');
          }
          routes = router.getRoutes();
          port = routes[slug].port;
        } else {
          port = process.env.DEFAULT_REDIRECT_PORT;
        }
        return proxy.ws(req, socket, head, {
          target: "ws://localhost:" + port,
          ws: true
        });
      } else {
        if (err != null) {
          logger.error(err);
        }
        return logger.error("Socket unauthorized");
      }
    });
  });
};
