// Generated by CoffeeScript 1.6.2
/* Middlewares
*/

var Client, appTracker, authentifiedEnvs, client, mime, saveTrackingInfo, timing, _ref,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

mime = function(req) {
  var str;

  str = req.headers['content-type'] || '';
  return str.split(';')[0];
};

exports.selectiveBodyParser = function(req, res, next) {
  var buf, isNoAuthRoute;

  isNoAuthRoute = req.url.indexOf("/routes") !== 0;
  isNoAuthRoute = isNoAuthRoute && req.url.indexOf("/login") !== 0;
  isNoAuthRoute = isNoAuthRoute && req.url.indexOf("/password") !== 0;
  isNoAuthRoute = isNoAuthRoute && req.url.indexOf("/register") !== 0;
  if (isNoAuthRoute) {
    return next();
  } else {
    req._body = true;
    buf = "";
    req.setEncoding("utf8");
    req.on("data", function(chunk) {
      return buf += chunk;
    });
    return req.on("end", function() {
      var err;

      if (buf.length > 0 && "{" !== buf[0] && "[" !== buf[0]) {
        return next(new Error("invalid json"));
      }
      try {
        if (buf.length > 0) {
          req.body = JSON.parse(buf);
        } else {
          req.body = "";
        }
        return next();
      } catch (_error) {
        err = _error;
        console.log(err);
        return next();
      }
    });
  }
};

/*
App usage tracking
*/


appTracker = {};

if ((process.env.NODE_ENV == null) || process.env.NODE_ENV === "development") {
  timing = 10000;
} else {
  timing = 5 * 60 * 1000;
}

Client = require('request-json').JsonClient;

client = new Client("http://localhost:9101/");

authentifiedEnvs = ['test', 'production'];

if (_ref = process.env.NODE_ENV, __indexOf.call(authentifiedEnvs, _ref) >= 0) {
  client.setBasicAuth(process.env.NAME, process.env.TOKEN);
}

saveTrackingInfo = function(info) {
  info.docType = "UseTracker";
  return client.post('data/', info, function(err, res, body) {
    if (err != null) {
      return console.log("Couldn't add app tracking info -- " + err);
    }
  });
};

exports.tracker = function(req, res, next) {
  var appInfo, appName, arrayUrl, date, url;

  url = req.url;
  if (url.indexOf("/apps") === 0) {
    arrayUrl = url.split('/');
    appName = arrayUrl[2];
    date = new Date();
    if (appTracker[appName] == null) {
      appTracker[appName] = {
        timer: date.getTime(),
        timeout: null
      };
    }
    appInfo = appTracker[appName];
    clearTimeout(appInfo.timeout);
    appInfo.timeout = setTimeout(function() {
      var dateEnd, dateStart, info;

      dateStart = appInfo.timer;
      dateEnd = new Date().getTime();
      info = {
        app: appName,
        dateStart: new Date(dateStart),
        dateEnd: new Date(dateEnd),
        duration: dateEnd - dateStart
      };
      delete appTracker[appName];
      return saveTrackingInfo(info);
    }, timing);
  }
  return next();
};
