{"version":3,"sources":["webpack:///register.471a3aa41f3e720ebae0.js","webpack:///./app/states/registration.coffee"],"names":["webpackJsonp","83","module","exports","__webpack_require__","$","Bacon","Registration","StateModel","bind","fn","me","apply","arguments","extend","child","parent","ctor","this","constructor","key","hasProp","call","prototype","__super__","hasOwnProperty","indexOf","item","i","l","length","superClass","signupSubmit","steps","hasGoogleImport","window","ENV","apps","preset","next","nextLabel","import","import_google","nocontrols","setup","welcome","initialize","errors","Bus","initStep","initControls","initSignup","initSetEmail","setStep","newStep","setStepBus","push","step","stepValve","holdWhen","startWith","toProperty","filter","_this","Object","keys","add","map","ref","nextControl","nextEnabled","nextBusy","combineTemplate","enabled","busy","label","visible","get","plug","value","onValue","path","loc","location","href","protocol","host","signup","data","req","fromPromise","post","JSON","stringify","subscribe","username","mapError","mapEnd","setEmail","setEmailSubmit","accountData","login","email","id","name","split","password","accountType","draftMailbox","favoriteMailboxes","imapPort","imapSSL","imapServer","imapTLS","smtpLogin","smtpMethod","smtpPassword","smtpPort","smtpSSL","smtpServer","smtpTLS","mailboxes","sentMailbox","trashMailbox","ajax","type","url","contentType","dataType"],"mappings":"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","file":"register.471a3aa41f3e720ebae0.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 83:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/*\n\tRegistration state-machine\n\t\n\tExposed streams and properties to the Register* views.\n\t */\n\tvar $, Bacon, Registration, StateModel,\n\t  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n\t  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n\t  hasProp = {}.hasOwnProperty,\n\t  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\t\n\tBacon = __webpack_require__(7);\n\t\n\t$ = __webpack_require__(9);\n\t\n\tStateModel = __webpack_require__(30);\n\t\n\tmodule.exports = Registration = (function(superClass) {\n\t  extend(Registration, superClass);\n\t\n\t  function Registration() {\n\t    this.signupSubmit = bind(this.signupSubmit, this);\n\t    return Registration.__super__.constructor.apply(this, arguments);\n\t  }\n\t\n\t\n\t  /*\n\t  Registration process consists of a progress across many screens, in a\n\t  non-linear mode. So, to keep it consistent, we declare the flow between\n\t  screens in this step var. Each step can declares:\n\t  - next: the step that comes after\n\t  - nextLabel: the label for the next button flow control\n\t  - nocontrols: hide the flow controls\n\t   */\n\t\n\t  Registration.prototype.steps = (function() {\n\t    var hasGoogleImport;\n\t    hasGoogleImport = indexOf.call(window.ENV.apps, 'import-from-google') >= 0;\n\t    return {\n\t      preset: {\n\t        next: hasGoogleImport ? 'import' : 'setup',\n\t        nextLabel: 'sign up'\n\t      },\n\t      \"import\": {\n\t        next: 'setup',\n\t        nextLabel: 'skip'\n\t      },\n\t      import_google: {\n\t        nocontrols: true\n\t      },\n\t      setup: {\n\t        next: 'welcome',\n\t        nocontrols: true\n\t      },\n\t      welcome: {\n\t        nextLabel: 'welcome'\n\t      }\n\t    };\n\t  })();\n\t\n\t  Registration.prototype.initialize = function() {\n\t    this.errors = new Bacon.Bus();\n\t    this.initStep();\n\t    this.initControls();\n\t    this.initSignup();\n\t    return this.initSetEmail();\n\t  };\n\t\n\t\n\t  /*\n\t  Set step property\n\t  \n\t  A simple wrapper to push the new step value in the `step` property.\n\t   */\n\t\n\t  Registration.prototype.setStep = function(newStep) {\n\t    return this.setStepBus.push(newStep);\n\t  };\n\t\n\t\n\t  /*\n\t  Initialize step flow\n\t  \n\t  Declares the streams and properties that'll be used to control step flow.\n\t   */\n\t\n\t  Registration.prototype.initStep = function() {\n\t    var step;\n\t    this.setStepBus = new Bacon.Bus();\n\t    this.stepValve = new Bacon.Bus();\n\t    step = this.setStepBus.holdWhen(this.stepValve.startWith(false).toProperty()).filter((function(_this) {\n\t      return function(step) {\n\t        return indexOf.call(Object.keys(_this.steps), step) >= 0;\n\t      };\n\t    })(this)).toProperty(null);\n\t    this.add('step', step);\n\t    return this.add('nextStep', step.map((function(_this) {\n\t      return function(step) {\n\t        var ref;\n\t        return ((ref = _this.steps[step]) != null ? ref.next : void 0) || null;\n\t      };\n\t    })(this)));\n\t  };\n\t\n\t\n\t  /*\n\t  Initialize the controls flow\n\t   */\n\t\n\t  Registration.prototype.initControls = function() {\n\t    var nextControl;\n\t    this.nextEnabled = new Bacon.Bus();\n\t    this.nextBusy = new Bacon.Bus();\n\t    this.nextLabel = new Bacon.Bus();\n\t    nextControl = Bacon.combineTemplate({\n\t      enabled: this.nextEnabled.startWith(true).toProperty(),\n\t      busy: this.nextBusy.startWith(false).toProperty(),\n\t      label: this.nextLabel.startWith('next').toProperty(),\n\t      visible: this.get('step').map((function(_this) {\n\t        return function(step) {\n\t          var ref;\n\t          return !((ref = _this.steps[step]) != null ? ref.nocontrols : void 0);\n\t        };\n\t      })(this))\n\t    });\n\t    this.nextLabel.plug(this.get('step').map((function(_this) {\n\t      return function(step) {\n\t        var ref;\n\t        return (ref = _this.steps[step]) != null ? ref.nextLabel : void 0;\n\t      };\n\t    })(this)));\n\t    this.setStepBus.filter((function(_this) {\n\t      return function(value) {\n\t        return !(indexOf.call(Object.keys(_this.steps), value) >= 0);\n\t      };\n\t    })(this)).onValue(function(path) {\n\t      var loc;\n\t      loc = window.location;\n\t      return window.location.href = loc.protocol + \"//\" + loc.host + path;\n\t    });\n\t    return this.add('nextControl', nextControl);\n\t  };\n\t\n\t\n\t  /*\n\t  Initialize sign up form\n\t   */\n\t\n\t  Registration.prototype.initSignup = function() {\n\t    this.signup = new Bacon.Bus();\n\t    this.stepValve.plug(this.get('step').map(function(step) {\n\t      return step === 'preset';\n\t    }));\n\t    this.nextEnabled.plug(this.get('step').map(function(step) {\n\t      return step !== 'preset';\n\t    }));\n\t    return this.signup.onValue(this.signupSubmit);\n\t  };\n\t\n\t\n\t  /*\n\t  Treats signup submission\n\t  \n\t  - data: an object containing the form input entries as key/values pairs\n\t   */\n\t\n\t  Registration.prototype.signupSubmit = function(data) {\n\t    var req;\n\t    req = Bacon.fromPromise($.post('/register', JSON.stringify(data)));\n\t    req.subscribe(function() {\n\t      return window.username = data['public_name'];\n\t    });\n\t    this.stepValve.plug(req.map(false));\n\t    this.errors.plug(req.errors().mapError('.responseJSON.errors'));\n\t    return this.nextBusy.plug(req.mapEnd(false));\n\t  };\n\t\n\t\n\t  /*\n\t  Initialize email account creation form\n\t  \n\t  Simply creates a bus to get the form submission and subscribe the submission\n\t  handler to this stream.\n\t   */\n\t\n\t  Registration.prototype.initSetEmail = function() {\n\t    this.setEmail = new Bacon.Bus();\n\t    return this.setEmail.onValue(this.setEmailSubmit);\n\t  };\n\t\n\t\n\t  /*\n\t  Treats email account creation form\n\t  \n\t  - data: an object containing the form input entries as key/values pairs\n\t   */\n\t\n\t  Registration.prototype.setEmailSubmit = function(data) {\n\t    var accountData, login;\n\t    login = data['imap-login'] || data.email;\n\t    accountData = {\n\t      id: null,\n\t      label: data.email,\n\t      name: data.email.split('@')[0],\n\t      login: login,\n\t      password: data.password,\n\t      accountType: \"IMAP\",\n\t      draftMailbox: \"\",\n\t      favoriteMailboxes: null,\n\t      imapPort: data['imap-port'],\n\t      imapSSL: data['imap-ssl'],\n\t      imapServer: data['imap-server'],\n\t      imapTLS: false,\n\t      smtpLogin: data['smtp-login'] || login,\n\t      smtpMethod: \"PLAIN\",\n\t      smtpPassword: data['smtp-password'] || data.password,\n\t      smtpPort: data['smtp-port'],\n\t      smtpSSL: data['smtp-ssl'],\n\t      smtpServer: data['smtp-server'] || data['imap-server'],\n\t      smtpTLS: false,\n\t      mailboxes: \"\",\n\t      sentMailbox: \"\",\n\t      trashMailbox: \"\"\n\t    };\n\t    return $.ajax({\n\t      type: 'POST',\n\t      url: '/apps/emails/account',\n\t      data: JSON.stringify(accountData),\n\t      contentType: \"application/json; charset=utf-8\",\n\t      dataType: 'json'\n\t    });\n\t  };\n\t\n\t  return Registration;\n\t\n\t})(StateModel);\n\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** register.471a3aa41f3e720ebae0.js\n **/","###\nRegistration state-machine\n\nExposed streams and properties to the Register* views.\n###\n\nBacon = require 'baconjs'\n$     = require 'jquery'\n\nStateModel = require '../lib/state_model'\n\n\nmodule.exports = class Registration extends StateModel\n\n    ###\n    Registration process consists of a progress across many screens, in a\n    non-linear mode. So, to keep it consistent, we declare the flow between\n    screens in this step var. Each step can declares:\n    - next: the step that comes after\n    - nextLabel: the label for the next button flow control\n    - nocontrols: hide the flow controls\n    ###\n    steps: do ->\n        hasGoogleImport = 'import-from-google' in window.ENV.apps\n\n        preset:\n            next:      if hasGoogleImport then 'import' else 'setup'\n            nextLabel: 'sign up'\n        import:\n            next:      'setup'\n            nextLabel: 'skip'\n        import_google:\n            nocontrols: true\n        setup:\n            next:       'welcome'\n            nocontrols: true\n        welcome:\n            nextLabel: 'welcome'\n\n\n    initialize: ->\n        # Initialize the bus to stream errors\n        @errors = new Bacon.Bus()\n\n        # Initialize each parts of registration process\n        @initStep()\n        @initControls()\n        @initSignup()\n        @initSetEmail()\n\n\n    ###\n    Set step property\n\n    A simple wrapper to push the new step value in the `step` property.\n    ###\n    setStep: (newStep) ->\n        @setStepBus.push newStep\n\n\n    ###\n    Initialize step flow\n\n    Declares the streams and properties that'll be used to control step flow.\n    ###\n    initStep: ->\n        @setStepBus = new Bacon.Bus()    # receive step updates\n        @stepValve  = new Bacon.Bus()    # a valve property that can temporary\n                                         # interrupt the step flow\n\n        # `step` property (added to the state-machine below) is streamed by the\n        # `setStepBus` stream, which is controlled by the `stepValve`, and\n        # filtered to ensure that the step exists (i.e step exists in the\n        # `steps` var)\n        step = @setStepBus\n            .holdWhen @stepValve.startWith(false).toProperty()\n            .filter (step) => step in Object.keys @steps\n            .toProperty null\n\n        @add 'step', step\n        # `nextStep` property contains the next step to come\n        @add 'nextStep', step.map (step) => @steps[step]?.next or null\n\n\n    ###\n    Initialize the controls flow\n    ###\n    initControls: ->\n        # Creates streams to handle controls state changes\n        @nextEnabled = new Bacon.Bus()    # enable/disable the next button\n        @nextBusy    = new Bacon.Bus()    # set next button busy state\n        @nextLabel   = new Bacon.Bus()    # set next button label\n\n        # To simply get next button state, we combine all streams / properties\n        # that represents it in a complex coombined property. It can be easily\n        # mapped to get state (e.g. `nextControl.map '.visible'` returns a\n        # boolean that describes if the control should be visible or not, using\n        # the `nocontrol` key declared in the `steps` var).\n        nextControl = Bacon.combineTemplate\n            enabled: @nextEnabled.startWith(true).toProperty()\n            busy:    @nextBusy.startWith(false).toProperty()\n            label:   @nextLabel.startWith('next').toProperty()\n            visible: @get('step').map (step) => not @steps[step]?.nocontrols\n\n        # We update the next button label using the `nextLabel` key in the\n        # `steps` var. We use a Bus to stream the value (rather than map is like\n        # the visible property above) to let views decides to update the label\n        # themselves.\n        @nextLabel.plug @get('step').map (step) => @steps[step]?.nextLabel\n\n        # In case the next called step isn't declared in the `steps` var, we\n        # assume it's a URL and navigate to it.\n        @setStepBus\n            .filter (value) => !(value in Object.keys @steps)\n            .onValue (path) ->\n                # /!\\ we can't set only the pathname here, because\n                # Chrome encodes it, replacing # with %23 See #195\n                loc = window.location\n                window.location.href = \"#{loc.protocol}//#{loc.host}#{path}\"\n\n\n        # Add the `nextControl` property to the state-machine\n        @add 'nextControl', nextControl\n\n\n    ###\n    Initialize sign up form\n    ###\n    initSignup: ->\n        # Declares a stream to receive the form submission\n        @signup = new Bacon.Bus()\n\n        # If the current step is `preset`, set the valve to block the step flow:\n        # it will resume when the sign up form request returns a success.\n        @stepValve.plug @get('step').map (step) -> step is 'preset'\n        # Disable the next button when enter in the `preset` step, it will be\n        # re-enabled when all required inputs are filled\n        @nextEnabled.plug @get('step').map (step) -> step isnt 'preset'\n        # Subscribe the `onSignupSubmit` handler to the sign up stream\n        @signup.onValue @signupSubmit\n\n\n    ###\n    Treats signup submission\n\n    - data: an object containing the form input entries as key/values pairs\n    ###\n    signupSubmit: (data) =>\n        # Submit the form content to the register endpoint and creates a stream\n        # with the ajax promise\n        req = Bacon.fromPromise $.post '/register', JSON.stringify data\n        # If the request is successful, we stores the username in the global\n        # scope to prepare the login view.\n        req.subscribe -> window.username = data['public_name']\n        # Unblock the step flow valve when the response is successful\n        @stepValve.plug req.map false\n        # Map request errors in the `errors` stream\n        @errors.plug req.errors().mapError '.responseJSON.errors'\n        # Map the request end to the next button busy state\n        @nextBusy.plug req.mapEnd false\n\n\n    ###\n    Initialize email account creation form\n\n    Simply creates a bus to get the form submission and subscribe the submission\n    handler to this stream.\n    ###\n    initSetEmail: ->\n        @setEmail = new Bacon.Bus()\n        @setEmail.onValue @setEmailSubmit\n\n\n    ###\n    Treats email account creation form\n\n    - data: an object containing the form input entries as key/values pairs\n    ###\n    setEmailSubmit: (data) ->\n        # Map form data to the _email_ app endpoint expected form\n        login = data['imap-login'] or data.email\n        accountData =\n            id:                null\n            label:             data.email\n            name:              data.email.split('@')[0]\n            login:             login\n            password:          data.password\n            accountType:       \"IMAP\"\n            draftMailbox:      \"\"\n            favoriteMailboxes: null\n            imapPort:          data['imap-port']\n            imapSSL:           data['imap-ssl']\n            imapServer:        data['imap-server']\n            imapTLS:           false\n            smtpLogin:         data['smtp-login'] or login\n            smtpMethod:        \"PLAIN\"\n            smtpPassword:      data['smtp-password'] or data.password\n            smtpPort:          data['smtp-port']\n            smtpSSL:           data['smtp-ssl']\n            smtpServer:        data['smtp-server'] or data['imap-server']\n            smtpTLS:           false\n            mailboxes:         \"\"\n            sentMailbox:       \"\"\n            trashMailbox:      \"\"\n\n        # We directly call the _emails_ app account creation endpoint and submit\n        # the accountData. We do not attach any handler to the response as we\n        # don't want to treat responses nor errors in onboarding: user will fix\n        # a wrong setup in the _emails_ app directly.\n        $.ajax\n            type:        'POST'\n            url:         '/apps/emails/account'\n            data:        JSON.stringify accountData\n            contentType: \"application/json; charset=utf-8\",\n            dataType:    'json'\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/states/registration.coffee\n **/"],"sourceRoot":""}