// Generated by CoffeeScript 1.9.3
var Client, Router, logger, util;

util = require('util');

Client = require('request-json').JsonClient;

logger = require('printit')({
  date: false,
  prefix: 'lib:router'
});

Router = (function() {
  Router.prototype.routes = {};

  function Router() {
    var homePort;
    homePort = process.env.DEFAULT_REDIRECT_PORT;
    this.client = new Client("http://localhost:" + homePort + "/");
  }

  Router.prototype.getRoutes = function() {
    return this.routes;
  };

  Router.prototype.displayRoutes = function(callback) {
    var ref, route, slug;
    ref = this.routes;
    for (slug in ref) {
      route = ref[slug];
      logger.info(slug + " (" + route.state + ") on port " + route.port);
    }
    if (callback != null) {
      return callback();
    }
  };

  Router.prototype.reset = function(callback) {
    logger.info('Start resetting routes...');
    this.routes = {};
    return this.client.get("api/applications/", (function(_this) {
      return function(error, res, apps) {
        var app, err, i, len, ref;
        if ((error != null) || (apps.error != null)) {
          logger.error("Cannot retrieve applications list.");
          logger.error(util.inspect(error) || apps.msg);
          return callback(error || apps.msg);
        }
        try {
          ref = apps.rows;
          for (i = 0, len = ref.length; i < len; i++) {
            app = ref[i];
            _this.routes[app.slug] = {};
            if (app.port != null) {
              _this.routes[app.slug].port = app.port;
            }
            if (app.state != null) {
              _this.routes[app.slug].state = app.state;
            }
          }
          logger.info("Routes have been successfully reset.");
          return callback();
        } catch (_error) {
          err = _error;
          logger.error("Oops, something went wrong during routes reset.");
          return callback(err);
        }
      };
    })(this));
  };

  return Router;

})();

module.exports = new Router();
