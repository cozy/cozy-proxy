// Generated by CoffeeScript 1.6.2
var JsonClient, StatusChecker, User, async, controllerUrl, couchUrl, dataSystemUrl, homePort, homeUrl, indexerUrl, proxyUrl;

async = require('async');

JsonClient = require('request-json').JsonClient;

User = require('../models/user');

couchUrl = "http://localhost:5984/";

controllerUrl = "http://localhost:9002/";

dataSystemUrl = "http://localhost:9101/";

indexerUrl = "http://localhost:9102/";

homePort = process.env.DEFAULT_REDIRECT_PORT;

homeUrl = "http://localhost:" + homePort + "/";

proxyUrl = "http://localhost:9104/";

StatusChecker = (function() {
  function StatusChecker() {}

  StatusChecker.prototype.client = new JsonClient();

  StatusChecker.prototype.status = {
    couchdb: false,
    datasystem: false,
    controller: false,
    indexer: false,
    home: false,
    registered: false
  };

  StatusChecker.prototype.checkAllStatus = function(callback) {
    var field, value, _ref,
      _this = this;

    _ref = this.status;
    for (field in _ref) {
      value = _ref[field];
      this.status[field] = false;
    }
    return async.series([this.getChecker("couchdb", couchUrl), this.getChecker("controller", controllerUrl, "drones/running"), this.getChecker("datasystem", dataSystemUrl), this.getChecker("indexer", indexerUrl), this.getChecker("home", homeUrl), this.getChecker("proxy", proxyUrl, "routes")], function() {
      return User.first(function(err, user) {
        if ((user == null) || err) {
          return callback(null, _this.status);
        } else {
          _this.status.registered = true;
          return callback(null, _this.status);
        }
      });
    });
  };

  StatusChecker.prototype.getChecker = function(app, url, path) {
    var _this = this;

    if (path == null) {
      path = "";
    }
    return function(callback) {
      _this.client.host = url;
      return _this.client.get(path, function(err, res, body) {
        var code;

        if (res != null) {
          code = res.statusCode;
          _this.status[app] = code === 200 || code === 401 || code === 403;
        } else {
          _this.status[app] = false;
        }
        return callback();
      }, false);
    };
  };

  return StatusChecker;

})();

module.exports = new StatusChecker();
